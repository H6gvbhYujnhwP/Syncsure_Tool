name: Build and Release SyncSure Agent

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag for the build'
        required: true
        type: string
      license_key:
        description: 'Customer license key to embed in the executable'
        required: true
        type: string

permissions:
  contents: write   # REQUIRED to create releases

env:
  PROJECT_NAME: SyncSureAgent

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: |
          cd src
          dotnet restore

      - name: Publish (win-x64, self-contained)
        run: |
          cd src
          # Set license key as environment variable for embedding
          $env:SYNCSURE_LICENSE_KEY = "${{ github.event.inputs.license_key }}"
          dotnet publish ./SyncSureAgent.csproj `
            -c Release `
            -r win-x64 `
            --self-contained true `
            -p:PublishSingleFile=true `
            -p:IncludeNativeLibrariesForSelfExtract=true `
            -p:PublishTrimmed=false `
            -p:DefineConstants="EMBEDDED_LICENSE" `
            -o ../out

      - name: Verify build output
        run: |
          $exePath = "out/${{ env.PROJECT_NAME }}.exe"
          if (Test-Path $exePath) {
            $fileInfo = Get-Item $exePath
            echo "Build successful!"
            echo "File: $($fileInfo.Name)"
            echo "Size: $([math]::Round($fileInfo.Length / 1MB, 2)) MB"
          } else {
            echo "Build failed - EXE not found"
            exit 1
          }

      - name: Generate SHA256 hash
        run: |
          $exePath = "out/${{ env.PROJECT_NAME }}.exe"
          $hash = Get-FileHash $exePath -Algorithm SHA256
          $hashValue = $hash.Hash
          $hashValue | Out-File -FilePath "out/${{ env.PROJECT_NAME }}.exe.sha256" -Encoding ASCII -NoNewline
          echo "SHA256 hash generated: $hashValue"

      - name: Copy deployment scripts
        run: |
          if (Test-Path "scripts/deploy-agent.ps1") {
            Copy-Item "scripts/deploy-agent.ps1" "out/deploy-syncsure-agent.ps1"
            echo "Deployment script copied"
          }

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: SyncSureAgent-win-x64
          path: out/**/*
          if-no-files-found: error

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: SyncSureAgent-win-x64
          path: out

      - name: Determine release flavor
        id: flavor
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.inputs.tag }}" != "" ]]; then
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "tag=main-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.flavor.outputs.tag }}
          name: SyncSure Agent ${{ steps.flavor.outputs.tag }}
          draft: false
          prerelease: ${{ steps.flavor.outputs.prerelease }}
          body: |
            ## SyncSure Agent ${{ steps.flavor.outputs.tag }}
            
            ### ðŸ“¦ Release Files:
            - **`${{ env.PROJECT_NAME }}.exe`** - Main agent executable (self-contained)
            - **`${{ env.PROJECT_NAME }}.exe.sha256`** - SHA256 hash for verification
            - **`deploy-syncsure-agent.ps1`** - PowerShell deployment script
            
            ### ðŸš€ Quick Installation:
            ```powershell
            .\deploy-syncsure-agent.ps1 -LicenseKey "YOUR-LICENSE" -MaxDevices 25
            ```
            
            ### ðŸ“‹ System Requirements:
            - Windows 10/11 or Windows Server 2016+
            - Administrator privileges for installation
            - Internet connectivity for license validation
          files: |
            out/${{ env.PROJECT_NAME }}.exe
            out/${{ env.PROJECT_NAME }}.exe.sha256
            out/deploy-syncsure-agent.ps1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

